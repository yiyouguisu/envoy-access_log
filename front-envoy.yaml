static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 80
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        config:
          access_log:
          - name: envoy.file_access_log
            filter:
              status_code_filter:
                comparison:
                  op: "GE"
                  value:
                    default_value: 200
                    runtime_key: access_log_status_code
            config:
              path: "/var/log/envoy_access.log"
              format: |
                {"protocol": "%PROTOCOL%", "request_time": "%DURATION%", "request_method": "%REQ(:METHOD)%", "request_id": "%REQ(X-REQUEST-ID)%", "status_code": "%RESP(status_code)%", "appid": "%REQ(appid)%"}
              # format: |
              #   [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%" "%REQ(USER-AGENT)%" "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%" "%UPSTREAM_HOST%"
          - name: envoy.file_access_log
            filter:
              response_flag_filter:
                flags: ['UO']
            config:
              path: "/var/log/envoy_circuit_breaker.log"
              format: |
                {"protocol": "%PROTOCOL%", "request_time": "%DURATION%", "request_method": "%REQ(:METHOD)%", "request_id": "%REQ(X-REQUEST-ID)%", "status_code": "%RESP(status_code)%", "appid": "%REQ(appid)%"}
              # format: |
              #   [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%" "%REQ(USER-AGENT)%" "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%" "%UPSTREAM_HOST%"
          generate_request_id: true
          use_remote_address: true
          tracing:
            operation_name: egress
          codec_type: auto
          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: backend
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/service/1"
                route:
                  cluster: service1
          http_filters:
          - name: envoy.lua
            config:
              inline_code: |
                function envoy_on_request(request_handle)
                  request_handle:logInfo("aaaaaaaaaaa")
                  request_handle:headers():add("appid", "data")
                end
                function envoy_on_response(response_handle)
                  response_handle:logInfo("bbbbbbbbbbb")
                  response_handle:headers():add("status_code", "500001")
                end
          - name: envoy.router
            config: {}
  clusters:
  - name: service1
    connect_timeout: 0.250s
    type: strict_dns
    lb_policy: round_robin
    http2_protocol_options: {}
    load_assignment:
      cluster_name: service1
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: service1
                port_value: 80
tracing:
  http:
    name: envoy.local
    config:
      collector_cluster: local
      collector_endpoint: /var/log/trace_log.log
admin:
  access_log_path: "/var/log/envoy_log.log"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
